// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  { name: "folders", columns: [] },
  {
    name: "users",
    columns: [
      { name: "username", type: "string" },
      { name: "password", type: "string", unique: true },
      { name: "FullName", type: "string" },
    ],
  },
  {
    name: "userContacts",
    columns: [
      { name: "cName", type: "string" },
      { name: "cEmail", type: "string" },
      { name: "cBusiness", type: "string" },
      { name: "Cdeal", type: "bool", notNull: true, defaultValue: "false" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Folders = InferredTypes["folders"];
export type FoldersRecord = Folders & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type UserContacts = InferredTypes["userContacts"];
export type UserContactsRecord = UserContacts & XataRecord;

export type DatabaseSchema = {
  folders: FoldersRecord;
  users: UsersRecord;
  userContacts: UserContactsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Anthony-Johnson-s-workspace-19l0mc.us-east-1.xata.sh/db/synctrackr",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
